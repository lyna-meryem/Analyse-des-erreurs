import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats


st.title("M√©thodes Statistiques d'Analyse des Donn√©es")

st.header("1. Intervalle de Confiance (IC)")
st.write("L‚Äô**intervalle de confiance** permet d‚Äôestimer la plage dans laquelle se situe la moyenne r√©elle d‚Äôune population.")

st.write("Formule g√©n√©rale :")
st.latex(r"IC = \bar{x} \pm z_{\alpha/2} \cdot \frac{s}{\sqrt{n}}")

st.write("Avec :")
st.latex(r"\overline{x} = \text{moyenne de l‚Äô√©chantillon}")
st.latex(r"s = \text{√©cart-type}")
st.latex(r"n = \text{taille de l‚Äô√©chantillon}")
st.latex(r"z_{\alpha/2} \approx 1.96 \text{ pour un IC √† 95\%}")


# Donn√©es
data = np.random.randn(100) * 5 + 50
mean = np.mean(data)
std_err = stats.sem(data)
conf = 0.95
h = std_err * stats.t.ppf((1+conf)/2, len(data)-1)
ci_low, ci_high = mean - h, mean + h

st.write(f"Moyenne : **{mean:.2f}**")
st.write(f"IC √† 95% : **[{ci_low:.2f}, {ci_high:.2f}]**")

# ===== 2. M√©thode des 3 Sigma =====
st.header("2. M√©thode des 3 Sigma")
st.markdown("""
Cette m√©thode identifie les **valeurs aberrantes** situ√©es en dehors de :
""")

st.latex(r"[\mu - 3\sigma , \mu + 3\sigma]")

st.write("Avec :")
st.latex(r"\mu = \text{moyenne}")
st.latex(r"\sigma = \text{√©cart-type}")

st.markdown("""
üëâ En th√©orie, **99,7%** des donn√©es d‚Äôune loi normale se trouvent dans cet intervalle.
""")


mu, sigma = np.mean(data), np.std(data)
borne_basse, borne_haute = mu - 3*sigma, mu + 3*sigma
outliers_sigma = [x for x in data if x < borne_basse or x > borne_haute]

st.write(f"Bornes : **[{borne_basse:.2f}, {borne_haute:.2f}]**")
st.write(f"Valeurs aberrantes d√©tect√©es (3œÉ) : {len(outliers_sigma)}")

# ===== 3. M√©thode de l‚ÄôIQR =====
st.header("3. M√©thode de l‚ÄôIQR (Interquartile Range)")
st.markdown(r"""
L‚Äô**IQR (√©cart interquartile)** mesure la dispersion des donn√©es entre le 1er quartile (Q1) et le 3√®me quartile (Q3).  

On consid√®re comme **outliers** les points en dehors de :  
""")
st.latex(r"""
[Q1 - 1.5 \cdot IQR , Q3 + 1.5 \cdot IQR]
""")

Q1, Q3 = np.percentile(data, [25, 75])
IQR = Q3 - Q1
borne_basse_iqr, borne_haute_iqr = Q1 - 1.5*IQR, Q3 + 1.5*IQR
outliers_iqr = [x for x in data if x < borne_basse_iqr or x > borne_haute_iqr]

st.write(f"Q1 = {Q1:.2f}, Q3 = {Q3:.2f}, IQR = {IQR:.2f}")
st.write(f"Bornes : **[{borne_basse_iqr:.2f}, {borne_haute_iqr:.2f}]**")
st.write(f"Valeurs aberrantes d√©tect√©es (IQR) : {len(outliers_iqr)}")




# ---------------------------
# 1. Charger les donn√©es
# ---------------------------
df = pd.read_csv("vols.csv", parse_dates=["[FK] Flight date"])

# ---------------------------
# 2. S√©lection de la colonne Delta

# ---------------------------
# 2. S√©lection de la colonne Delta
# ---------------------------
delta_columns = [col for col in df.columns if "Delta" in col]
selected_delta_col = st.selectbox("Choisir la colonne Delta √† analyser", delta_columns)

df[selected_delta_col] = (
    df[selected_delta_col]
    .astype(str)                # transformer en texte pour le nettoyage
    .str.replace(",", ".", regex=False)  # remplacer virgule par point
)
# S‚Äôassurer que la colonne choisie est bien num√©rique
df[selected_delta_col] = pd.to_numeric(df[selected_delta_col], errors="coerce")

# ---------------------------
# Conversion en kg si n√©cessaire
# ---------------------------
if "en T" in selected_delta_col:   # Si le nom de la colonne contient "T"
    st.info(f"‚öñÔ∏è Conversion automatique de {selected_delta_col} en kilogrammes (kg)")
    df[selected_delta_col] = df[selected_delta_col] * 1000

# ---------------------------

# S‚Äôassurer que la colonne choisie est bien num√©rique
df[selected_delta_col] = pd.to_numeric(df[selected_delta_col], errors="coerce")

# ---------------------------
# 3. Filtres (dans la sidebar √† droite)
# ---------------------------
st.sidebar.header("üìå Filtres")

# ----- CityPair -----
city_options = sorted(df["[LIDO] Citypair"].dropna().unique().tolist())


if "selected_cities" not in st.session_state:
    st.session_state.selected_cities = []

search_city = st.sidebar.text_input("üîé Rechercher un CityPair")

if search_city:
    filtered_city_options = [c for c in city_options if search_city.lower() in c.lower()]
else:
    filtered_city_options = city_options

def select_all_cities():
    st.session_state.selected_cities = filtered_city_options

st.sidebar.button("S√©lectionner tous les CityPairs affich√©s", on_click=select_all_cities)

# Filtrer les valeurs par d√©faut pour √©viter l'erreur
default_selected = [c for c in st.session_state.selected_cities if c in filtered_city_options]

selected_cities = st.sidebar.multiselect(
    "CityPair",
    options=filtered_city_options,
    default=default_selected
)


# ----- Type Avion -----
type_options = df["Type Avions IATA"].dropna().unique().tolist()
if "selected_types" not in st.session_state:
    st.session_state.selected_types = []

def select_all_types():
    st.session_state.selected_types = type_options

st.sidebar.button("S√©lectionner tous les Types Avions", on_click=select_all_types)

selected_types = st.sidebar.multiselect(
    "Type Avions IATA",
    options=type_options,
    default=st.session_state.selected_types
)

# ----- Dates avec un slider -----
min_date = df["[FK] Flight date"].min()
max_date = df["[FK] Flight date"].max()

date_range = st.sidebar.slider(
    "S√©lectionner la p√©riode",
    min_value=min_date.to_pydatetime(),
    max_value=max_date.to_pydatetime(),
    value=(min_date.to_pydatetime(), max_date.to_pydatetime()),
    format="DD/MM/YYYY"
)

start_date = pd.to_datetime(date_range[0])
end_date = pd.to_datetime(date_range[1])

# ----- Area -----
area_options = df["Area"].dropna().unique().tolist()
if "selected_area" not in st.session_state:
    st.session_state.selected_area = []

def select_all_area():
    st.session_state.selected_area = area_options

st.sidebar.button("S√©lectionner tous les secteurs", on_click=select_all_area)

selected_area = st.sidebar.multiselect(
    "Area",
    options=area_options,
    default=st.session_state.selected_area
)


# ---------------------------
# 4. Filtrage des donn√©es
# ---------------------------
df_filtered = df[
    (df["[LIDO] Citypair"].isin(selected_cities)) &
    (df["Area"].isin(selected_area)) &
    (df["Type Avions IATA"].isin(selected_types)) &
    (df["[FK] Flight date"].between(start_date, end_date))
]

st.write(f"üìä Nombre de vols filtr√©s : **{len(df_filtered)}**")

# ---------------------------
# 5. Bootstrap et IC95%
# ---------------------------
df_filtered = df_filtered.dropna(subset=[selected_delta_col])

if len(df_filtered) > 0:
    NBOOT = 5000
    boot_means = [
        df_filtered[selected_delta_col].sample(frac=1, replace=True).mean()
        for _ in range(NBOOT)
    ]
    ci_low, ci_high = np.percentile(boot_means, [2.5, 97.5])
    mean_observed = df_filtered[selected_delta_col].mean()

    fig, ax = plt.subplots(figsize=(8, 4))
    ax.hist(boot_means, bins=30, color="skyblue", edgecolor="black")
    ax.axvline(ci_low, color="red", linestyle="--", label=f"IC 2.5% = {ci_low:.2f}")
    ax.axvline(ci_high, color="red", linestyle="--", label=f"IC 97.5% = {ci_high:.2f}")
    ax.axvline(mean_observed, color="green", linestyle="-", label=f"Moyenne = {mean_observed:.2f}")
    ax.set_title(f"Distribution bootstrap de {selected_delta_col}")
    ax.set_xlabel("Gain moyen (Delta)")
    ax.set_ylabel("Fr√©quence")
    ax.legend()
    st.pyplot(fig)
else:
    st.warning("‚ö†Ô∏è Aucun vol valide trouv√© pour la colonne s√©lectionn√©e")

# ---------------------------
# 6. Analyse des outliers
# ---------------------------
if len(df_filtered) > 0:
    mean_delta = df_filtered[selected_delta_col].mean()
    std_delta = df_filtered[selected_delta_col].std()

    # M√©thode 3 sigma
    outliers_sigma = df_filtered[np.abs(df_filtered[selected_delta_col] - mean_delta) > 3 * std_delta]

    # M√©thode IQR
    Q1 = df_filtered[selected_delta_col].quantile(0.25)
    Q3 = df_filtered[selected_delta_col].quantile(0.75)
    IQR = Q3 - Q1
    outliers_iqr = df_filtered[
        (df_filtered[selected_delta_col] < Q1 - 1.5 * IQR) |
        (df_filtered[selected_delta_col] > Q3 + 1.5 * IQR)
    ]

    st.subheader("üìå Analyse des Outliers")
    st.write("Vols outliers (m√©thode 3œÉ) :", outliers_sigma)
    st.write("Vols outliers (m√©thode IQR) :", outliers_iqr)



# Trouver la colonne LIDO qui pr√©c√®de la colonne Delta choisie
col_index = df_filtered.columns.get_loc(selected_delta_col)
mean_observed = df_filtered[selected_delta_col].mean()

if col_index > 0:
    lido_col = df_filtered.columns[col_index - 1]  # juste avant
    df_filtered[lido_col] = pd.to_numeric(df_filtered[lido_col], errors="coerce")

    # Moyenne LIDO
    mean_lido = df_filtered[lido_col].mean()

    # Pourcentages relatifs
    mean_pct = (mean_observed / mean_lido) * 100
    ci_low_pct = (ci_low / mean_lido) * 100
    ci_high_pct = (ci_high / mean_lido) * 100

    st.subheader("üìä Intervalle de confiance relatif (%)")
    st.write(f"Moyenne {lido_col} : **{mean_lido:.2f}**")
    st.write(f"Gain moyen relatif (Delta vs LIDO) : **{mean_pct:.2f}%**")
    st.write(f"IC95% relatif : **[{ci_low_pct:.2f}%, {ci_high_pct:.2f}%]**")
else:
    st.error("‚ö†Ô∏è Impossible de trouver la colonne LIDO correspondante.")
    
    
col_index = df_filtered.columns.get_loc(selected_delta_col)
lido_col = df_filtered.columns[col_index - 1]
df_filtered[lido_col] = df_filtered[lido_col].astype(str).str.replace('[\$,]', '', regex=True)
df_filtered[lido_col] = pd.to_numeric(df_filtered[lido_col], errors='coerce')


st.write("Colonne LIDO r√©cup√©r√©e :", lido_col)
st.write("Premi√®res lignes :", df_filtered[[lido_col, selected_delta_col]].head())

# ---------------------------
# 7. M√©thode par strates (types d‚Äôavions, citypairs)
# ---------------------------
st.header("4. M√©thode stratifi√©e (Types d‚Äôavions / Citypairs)")

# Choix de la strate
strata_col = st.selectbox(
    "Choisir la variable de stratification",
    ["Type Avions IATA", "[LIDO] Citypair"]
)

# Estimation stratifi√©e
def stratified_estimation(df, strata_col, value_col, N_dict, z=1.96):
    results = []
    for h, group in df.groupby(strata_col):
        nh = len(group)                       # √©chantillon
        Nh = N_dict.get(h, nh)                # population r√©elle (√† fournir si connue)
        xh_bar = group[value_col].mean()      # moyenne observ√©e
        sh = group[value_col].std(ddof=1)     # √©cart-type

        Th = Nh * xh_bar                      # total estim√©
        var_Th = (Nh**2 * sh**2 / nh) * ((Nh - nh) / (Nh - 1)) if nh > 1 else 0

        results.append({
            "Strate": h,
            "Nh (total vols)": Nh,
            "nh (√©chantillon)": nh,
            "Moyenne √©chantillon": xh_bar,
            "Total estim√© (Th)": Th,
            "Variance(Th)": var_Th
        })

    res_df = pd.DataFrame(results)
    T_hat = res_df["Total estim√© (Th)"].sum()
    Var_T = res_df["Variance(Th)"].sum()
    SE_T = np.sqrt(Var_T)
    ME = z * SE_T
    IC_low, IC_high = T_hat - ME, T_hat + ME

    return res_df, T_hat, Var_T, (IC_low, IC_high)

# ‚ö†Ô∏è √Ä remplacer par les vrais Nh si tu les connais (nombre total de vols r√©els par strate)
N_dict = {h: len(g) for h, g in df_filtered.groupby(strata_col)}

if len(df_filtered) > 0:
    res_df, T_hat, Var_T, IC = stratified_estimation(df_filtered, strata_col, selected_delta_col, N_dict)

    st.subheader("üìä R√©sultats par strate")
    st.dataframe(res_df)

    st.write(f"**Total estim√©** : {T_hat:.2f}")
    st.write(f"**Variance totale** : {Var_T:.2f}")
    st.write(f"**IC95% du total** : [{IC[0]:.2f}, {IC[1]:.2f}]")
else:
    st.warning("‚ö†Ô∏è Aucune donn√©e disponible pour la stratification.")

